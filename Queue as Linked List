#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{
int data;
struct node*link;
};
struct queue
{
struct node*front;
struct node*rear;
};
void initqueue(struct queue*);
void addq(struct queue*,int);
int delq(struct queue*);
void delqueue(struct queue*);
void main()
{
struct queue a;
int i;
clrscr();
initqueue(&a);
addq(&a,31);
addq(&a,-3);
addq(&a,14);
addq(&a,-41);
addq(&a,3);
addq(&a,43);
addq(&a,12);
addq(&a,42);
i=delq(&a);
printf("\n Item extracted:%d",i);
i=delq(&a);
printf("\n Item extracted:%d",i);
i=delq(&a);
printf("\n Item extracted:%d",i);
delqueue(&a);
getch();
}
/* initialises data member*/
void initqueue(struct queue *q)
{
q->front=q->rear=NULL;
}
/* adds an element to the queue*/
void addq(struct queue *q,int item)
{
struct node*temp;
temp=(struct node*)malloc(sizeof(struct node));
if(temp==NULL)
printf("\n Queue is full.");
temp->data=item;
temp->link=NULL;
if(q->front==NULL)
{
q->rear=q->front=temp;
return;
}
q->rear->link=temp;
q->rear=q->rear->link;
}
/* removes an element from the queue*/
int delq(struct queue *q)
{
struct node*temp;
int item;
if(q->front==NULL)
{
printf("\n Queue is empty.");
return NULL;
}
item=q->front->data;
temp=q->front;
q->front=q->front->link;
free(temp);
return item;
}
/*deallocates memory*/
void delqueue(struct queue *q)
{
struct node*temp;
if(q->front==NULL)
return;
while(q->front!=NULL)
{
temp=q->front;
q->front=q->front->link;
free(temp);
}
}
